package com.limijiaoyin.socialsdk.dialogs;import java.io.IOException;import java.util.ArrayList;import java.util.List;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.HttpStatus;import org.apache.http.NameValuePair;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.HttpPost;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.message.BasicNameValuePair;import org.apache.http.protocol.BasicHttpContext;import org.apache.http.protocol.HttpContext;import org.apache.http.util.EntityUtils;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.os.Handler;import android.text.TextUtils;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import com.limijiaoyin.socialsdk.Const;import com.limijiaoyin.socialsdk.ISocialLogin;import com.limijiaoyin.socialsdk.Platform;import com.limijiaoyin.socialsdk.R;import com.limijiaoyin.socialsdk.social.SinaSSOListener;import com.limijiaoyin.socialsdk.social.TencentSSOListener;import com.limijiaoyin.socialsdk.utils.Config;import com.tencent.tauth.Tencent;import com.weibo.sdk.android.Weibo;import com.weibo.sdk.android.sso.SsoHandler;public class CommonShareDialog {  private ShareDialog shareDialog;  private TextView titleText;  private EditText contentEditText;  private TextView descriptionText;  private CheckBox syncSina;  private CheckBox syncQzone;  private CheckBox syncRenren;  private CheckBox syncTqq;  private Button share;  private Button cancel;  private final Context context;  private SsoHandler mSsoHandler;  private final Weibo mWeibo;  private final Tencent mTencent;  private String title;  private String content;  private String description;  private Platform mRedirectPlatform;  public interface OnShareListener {    void onShared();    void onFailed();  }  private OnShareListener shareListener;  private Handler handler = new Handler();  private ISocialLogin mSocialLoginListener = new SocialBindListener();  public void setOnShareListener(OnShareListener listener) {    shareListener = listener;  }  public CommonShareDialog(Context ctx) {    this(ctx, null, null, null);  }  public CommonShareDialog(Context ctx, String content) {    this(ctx, content, null, null);  }  public CommonShareDialog(Context ctx, String content, String title) {    this(ctx, content, title, null);  }  public CommonShareDialog(Context ctx, String content, String title,            String description) {    this.context = ctx;    this.title = title;    this.content = content;    this.description = description;    mWeibo = Weibo.getInstance(Const.SINA_CONSUMER_KEY, Const.SINA_REDIRECT_URL, Const.SINA_SCOPE);    mTencent = Tencent.createInstance(Const.TENCENT_APP_ID, context.getApplicationContext());    initShareDialog(ctx);  }  public SsoHandler getSinaSSOHandler() {    return mSsoHandler;  }  private void initShareDialog(Context ctx) {    shareDialog = new ShareDialog(ctx);    titleText = (TextView) shareDialog.findViewById(R.id.dialog_title);    if (!TextUtils.isEmpty(title)) {      titleText.setText(title);    }    contentEditText = (EditText) shareDialog                .findViewById(R.id.comment_dialog_content);    if (!TextUtils.isEmpty(content)) {      contentEditText.setText(content);    }    descriptionText = (TextView) shareDialog.findViewById(R.id.description);    if (!TextUtils.isEmpty(description)) {      descriptionText.setText(description);    }    syncSina = (CheckBox) shareDialog                .findViewById(R.id.comment_dialog_sync_sina);    syncQzone = (CheckBox) shareDialog                .findViewById(R.id.comment_dialog_sync_qzone);    syncRenren = (CheckBox) shareDialog                .findViewById(R.id.comment_dialog_sync_renren);    syncTqq = (CheckBox) shareDialog                .findViewById(R.id.comment_dialog_sync_tqq);    new ProfileThread().start();    syncSina.setOnCheckedChangeListener(new CheckBox.OnCheckedChangeListener() {      @Override      public void onCheckedChanged(CompoundButton buttonView,                    boolean isChecked) {        if (isChecked && !Config.getActiveSina(context)) {          redirectBind(Platform.SINA);          buttonView.setChecked(false);        }      }    });    syncQzone.setOnCheckedChangeListener(new CheckBox.OnCheckedChangeListener() {      @Override      public void onCheckedChanged(CompoundButton buttonView,                            boolean isChecked) {        if (isChecked && !Config.getActiveQQ(context)) {          redirectBind(Platform.QQ);          buttonView.setChecked(false);        }      }    });    syncTqq.setOnCheckedChangeListener(new CheckBox.OnCheckedChangeListener() {      @Override      public void onCheckedChanged(CompoundButton buttonView,                    boolean isChecked) {        if (isChecked && !Config.getActiveQQ(context)) {          redirectBind(Platform.QQ);          buttonView.setChecked(false);        }      }    });    syncRenren.setOnCheckedChangeListener(new CheckBox.OnCheckedChangeListener() {      @Override      public void onCheckedChanged(CompoundButton buttonView,                            boolean isChecked) {        if (isChecked && !Config.getActiveRenren(context)) {          redirectBind(Platform.RENREN);          buttonView.setChecked(false);        }      }    });    initShareStatus();    share = (Button) shareDialog.findViewById(R.id.share);    share.setOnClickListener(new OnClickListener() {      @Override      public void onClick(View v) {        if (syncSina.isChecked() || syncQzone.isChecked()                        || syncTqq.isChecked() || syncRenren.isChecked()) {          share.setEnabled(false);          new ShareThread(contentEditText.getText().toString())                            .start();        } else {          Toast.makeText(                            context,                            context.getString(R.string.choose_share_platform_tip),                            Toast.LENGTH_SHORT).show();        }      }    });    cancel = (Button) shareDialog.findViewById(R.id.cancel);    cancel.setOnClickListener(new OnClickListener() {      @Override      public void onClick(View v) {        shareDialog.cancel();      }    });  }  public void initShareStatus() {    if (Config.getActiveSina(context)) {      syncSina.setChecked(true);    }    if (Config.getActiveQQ(context)) {      syncQzone.setChecked(true);      syncTqq.setChecked(true);    }    if (Config.getActiveRenren(context)) {      syncRenren.setChecked(true);    }  }    public void refreshShareStatus() {    if (!Config.getActiveSina(context)) {      syncSina.setChecked(false);    }    if (!Config.getActiveQQ(context)) {      syncQzone.setChecked(false);      syncTqq.setChecked(false);    }    if (!Config.getActiveRenren(context)) {      syncRenren.setChecked(false);    }  }  private void sinaSSOLogin() {    if (context instanceof Activity) {      mSsoHandler = new SsoHandler((Activity) context, mWeibo);      mSsoHandler.authorize(new SinaSSOListener(Config                    .getDeviceInfo(context), mSocialLoginListener));    }  }  private void tencentSSOLogin() {    if (context instanceof Activity) {      mTencent.login((Activity) context, Const.TENCENT_APP_ID, new TencentSSOListener(Config                    .getDeviceInfo(context), mSocialLoginListener));    }  }  public void redirectBind(Platform platform) {    String url = Const.AUTHORIZE_URL + Config.getDeviceInfo(context);    String authUrl = "";        mRedirectPlatform = platform;        if (platform.equals(Platform.SINA)) {//      mWeibo.anthorize(context, new SinaSSOListener(Config//          .getDeviceInfo(context), mSocialLoginListener));      sinaSSOLogin();      return;    } else if (platform.equals(Platform.QQ)) {      tencentSSOLogin();      return;    } else if (platform.equals(Platform.RENREN)) {      authUrl = String.format(url, "renren");    }    AccountOauthDialog oauthDialog = new AccountOauthDialog(context,                authUrl, platform, mSocialLoginListener);    oauthDialog.show();  }  public ShareDialog create() {    if (shareDialog != null) {      return shareDialog;    }    return null;  }    public void onActivityResult(int requestCode, int resultCode, Intent data) {    if (mRedirectPlatform == Platform.SINA) {      getSinaSSOHandler().authorizeCallBack(requestCode, resultCode, data);    } else if (mRedirectPlatform == Platform.QQ) {      mTencent.onActivityResult(requestCode, resultCode, data);    }  }  private String buildSharePlatforms() {    ArrayList<String> platforms = new ArrayList<String>();    if (syncSina.isChecked()) {      platforms.add("sina");    }    if (syncQzone.isChecked()) {      platforms.add("qzone");    }    if (syncTqq.isChecked()) {      platforms.add("tqq");    }    if (syncRenren.isChecked()) {      platforms.add("renren");    }    StringBuilder platformsString = new StringBuilder();    for (int i = 0; i < platforms.size(); i++) {      platformsString.append(platforms.get(i));      if (i < platforms.size() - 1) {        platformsString.append(",");      }    }    return platformsString.toString();  }  private void unbindPlatform(HttpResponse response) throws IOException {    String result = EntityUtils.toString(response.getEntity(), "utf-8");    if (!TextUtils.isEmpty(result)) {      String[] platformList = result.split(",");      for (String plat : platformList) {        if (plat.equals("sina")) {          Config.setActiveSina(false, context);        } else if (plat.equals("qq")) {          Config.setActiveQQ(false, context);        } else if (plat.equals("renren")) {          Config.setActiveRenren(false, context);        }      }    }  }  class ShareThread extends Thread {    private final String content;    public ShareThread(String content) {      this.content = content;    }    @Override    public void run() {      HttpPost request = new HttpPost(Const.SHARE_URL);      List<NameValuePair> params = new ArrayList<NameValuePair>();      params.add(new BasicNameValuePair("deviceId", Config                    .getDeviceInfo(context)));      params.add(new BasicNameValuePair("platform", buildSharePlatforms()));      params.add(new BasicNameValuePair("content", content));      try {        HttpEntity entity = new UrlEncodedFormEntity(params, "UTF-8");        request.setEntity(entity);        DefaultHttpClient client = new DefaultHttpClient();        HttpContext httpContext = new BasicHttpContext();        HttpResponse response = client.execute(request, httpContext);        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {          handler.post(new Thread() {            public void run() {              if (shareListener != null) {                shareListener.onShared();              }              shareDialog.dismiss();              Toast.makeText(                                    context,                                    ((Activity) context)                                            .getString(R.string.share_success),                                    Toast.LENGTH_SHORT).show();            }          });        } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_BAD_REQUEST) {          unbindPlatform(response);          handler.post(new Thread() {            public void run() {              if (shareListener != null) {                shareListener.onFailed();              }              share.setEnabled(true);              Toast.makeText(                                    context,                                    ((Activity) context)                                            .getString(R.string.share_expired),                                    Toast.LENGTH_SHORT).show();              refreshShareStatus();            }          });        } else {          unbindPlatform(response);          handler.post(new Thread() {            public void run() {              if (shareListener != null) {                shareListener.onFailed();              }              share.setEnabled(true);              Toast.makeText(                                    context,                                    ((Activity) context)                                            .getString(R.string.share_failure),                                    Toast.LENGTH_SHORT).show();              refreshShareStatus();            }          });        }      } catch (Exception e) {        handler.post(new Thread() {          public void run() {            if (shareListener != null) {              shareListener.onFailed();            }            share.setEnabled(true);            Toast.makeText(                                context,                                ((Activity) context)                                        .getString(R.string.share_failure),                                Toast.LENGTH_SHORT).show();          }        });      }    }  }  class ProfileThread extends Thread {    @Override    public void run() {      HttpPost request = new HttpPost(Const.PROFILE_URL);      List<NameValuePair> params = new ArrayList<NameValuePair>();      params.add(new BasicNameValuePair("deviceId", Config                    .getDeviceInfo(context)));      try {        HttpEntity entity = new UrlEncodedFormEntity(params, "UTF-8");        request.setEntity(entity);        DefaultHttpClient client = new DefaultHttpClient();        HttpContext httpContext = new BasicHttpContext();        HttpResponse response = client.execute(request, httpContext);        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {          String content = EntityUtils.toString(response.getEntity(),                            "utf-8");          if (!TextUtils.isEmpty(content)) {            String[] platformList = content.split(",");            for (String platform : platformList) {              if (platform.equals("sina")) {                Config.setActiveSina(true, context);              } else if (platform.equals("qq")) {                Config.setActiveQQ(true, context);              } else if (platform.equals("renren")) {                Config.setActiveRenren(true, context);              }            }          } else {            Config.cleanLocalStorage(context);          }          handler.post(new Thread() {            public void run() {              refreshShareStatus();            }          });        }      } catch (Exception e) {      }    }  }  class SocialBindListener implements ISocialLogin {    @Override    public void onLoginSuccess(Platform platform) {      if (platform == null) {        return;      }      if (platform.equals(Platform.SINA)) {        Config.setActiveSina(true, context);      } else if (platform.equals(Platform.QQ)) {        Config.setActiveQQ(true, context);      } else if (platform.equals(Platform.RENREN)) {        Config.setActiveRenren(true, context);      }      handler.post(new Thread() {        public void run() {          initShareStatus();        }      });    }    @Override    public void onLoginFailure() {      handler.post(new Thread() {        public void run() {          Toast.makeText(context, "failure", Toast.LENGTH_SHORT)                            .show();        }      });    }  }}
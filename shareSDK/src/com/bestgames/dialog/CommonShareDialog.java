package com.bestgames.dialog;import java.io.IOException;import java.util.ArrayList;import java.util.List;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.HttpStatus;import org.apache.http.NameValuePair;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.HttpPost;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.message.BasicNameValuePair;import org.apache.http.protocol.BasicHttpContext;import org.apache.http.protocol.HttpContext;import org.apache.http.util.EntityUtils;import android.app.Activity;import android.app.AlertDialog;import android.content.Context;import android.content.DialogInterface;import android.os.Handler;import android.text.TextUtils;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import com.bestgames.sharesdk.Const;import com.bestgames.sharesdk.ISocialLogin;import com.bestgames.sharesdk.Platform;import com.bestgames.sharesdk.R;import com.bestgames.social.SinaSSOListener;import com.bestgames.utils.Config;import com.weibo.sdk.android.Weibo;import com.weibo.sdk.android.sso.SsoHandler;public class CommonShareDialog {    private AlertDialog.Builder builder;    private AlertDialog shareDialog;    private TextView titleText;    private EditText contentEditText;    private CheckBox syncSina;    private CheckBox syncQzone;    private CheckBox syncRenren;    private CheckBox syncTqq;    private final Context context;    private View mainLayout;    private View headLayout;    private SsoHandler mSsoHandler;    private final Weibo mWeibo;    private Platform mPlatform;    private String title;    private String content;    private Handler handler = new Handler();    private ISocialLogin mSocialLoginListener = new SocialBindListener();    public CommonShareDialog(Context ctx) {        this.context = ctx;        mWeibo = Weibo.getInstance(Const.SINA_CONSUMER_KEY,                Const.SINA_REDIRECT_URL);        initShareDialog(ctx);    }    /***     *      * @param ctx     * @param content the content want to share     */    public CommonShareDialog(Context ctx, String content) {        this.context = ctx;        this.content = content;        mWeibo = Weibo.getInstance(Const.SINA_CONSUMER_KEY,                Const.SINA_REDIRECT_URL);        initShareDialog(ctx);    }    /***     *      * @param ctx     * @param content the content want to share     * @param title  share dialog title     */    public CommonShareDialog(Context ctx, String content, String title) {        this.context = ctx;        this.title = title;        this.content = content;        mWeibo = Weibo.getInstance(Const.SINA_CONSUMER_KEY,                Const.SINA_REDIRECT_URL);        initShareDialog(ctx);    }    public SsoHandler getSinaSSOHandler() {        return mSsoHandler;    }    private void initShareDialog(Context ctx) {        builder = new AlertDialog.Builder(context);        // builder.setTitle(R.string.detail_dialog_title);        headLayout = LayoutInflater.from(context).inflate(                R.layout.send_comment_dialog_title, null);        titleText = (TextView) headLayout                .findViewById(R.id.comment_dialog_title);        if (!TextUtils.isEmpty(title)) {            titleText.setText(title);        }        mainLayout = LayoutInflater.from(context).inflate(                R.layout.send_comment_dialog_content, null);        contentEditText = (EditText) mainLayout                .findViewById(R.id.comment_dialog_content);        if (!TextUtils.isEmpty(content)) {            contentEditText.setText(content);        }        syncSina = (CheckBox) mainLayout                .findViewById(R.id.comment_dialog_sync_sina);        syncQzone = (CheckBox) mainLayout                .findViewById(R.id.comment_dialog_sync_qzone);        syncRenren = (CheckBox) mainLayout                .findViewById(R.id.comment_dialog_sync_renren);        syncTqq = (CheckBox) mainLayout                .findViewById(R.id.comment_dialog_sync_tqq);        syncSina.setOnCheckedChangeListener(new CheckBox.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton buttonView,                    boolean isChecked) {                if (!Config.getActiveSina(context)) {                    redirectBind(Platform.SINA);                    buttonView.setChecked(false);                }            }        });        syncQzone                .setOnCheckedChangeListener(new CheckBox.OnCheckedChangeListener() {                    @Override                    public void onCheckedChanged(CompoundButton buttonView,                            boolean isChecked) {                        if (!Config.getActiveQQ(context)) {                            redirectBind(Platform.QQ);                            buttonView.setChecked(false);                        }                    }                });        syncTqq.setOnCheckedChangeListener(new CheckBox.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton buttonView,                    boolean isChecked) {                if (!Config.getActiveQQ(context)) {                    redirectBind(Platform.QQ);                    buttonView.setChecked(false);                }            }        });        syncRenren                .setOnCheckedChangeListener(new CheckBox.OnCheckedChangeListener() {                    @Override                    public void onCheckedChanged(CompoundButton buttonView,                            boolean isChecked) {                        if (!Config.getActiveRenren(context)) {                            redirectBind(Platform.RENREN);                            buttonView.setChecked(false);                        }                    }                });        builder.setCustomTitle(headLayout);        builder.setView(mainLayout);        refreshShareStatus();        shareDialog = builder.create();        shareDialog.setButton(DialogInterface.BUTTON1,                context.getString(R.string.share), dialogButtonOnClickListener);        shareDialog.setButton(DialogInterface.BUTTON2, context.getResources()                .getString(R.string.cancel),                new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        shareDialog.cancel();                    }                });    }    private final DialogInterface.OnClickListener dialogButtonOnClickListener = new DialogInterface.OnClickListener() {        @Override        public void onClick(DialogInterface dialog, int which) {            new ShareThread(contentEditText.getText().toString()).start();        }    };    public void refreshShareStatus() {        if (Config.getActiveSina(context)) {            syncSina.setChecked(true);        }        if (Config.getActiveQQ(context)) {            syncQzone.setChecked(true);            syncTqq.setChecked(true);        }        if (Config.getActiveRenren(context)) {            syncRenren.setChecked(true);        }    }    private void sinaSSOLogin() {        if (context instanceof Activity) {            mSsoHandler = new SsoHandler((Activity) context, mWeibo);            mSsoHandler.authorize(new SinaSSOListener(Config                    .getDeviceInfo(context), mSocialLoginListener));        }    }    public void redirectBind(Platform platform) {        String url = "http://huwei.bestgames7.com/web/%s/authorize?deviceId="                + Config.getDeviceInfo(context);        String authUrl = "";        if (platform.equals(Platform.SINA)) {            sinaSSOLogin();            return;        } else if (platform.equals(Platform.QQ)) {            authUrl = String.format(url, "qq");        } else if (platform.equals(Platform.RENREN)) {            authUrl = String.format(url, "renren");        }        AccountOauthDialog oauthDialog = new AccountOauthDialog(context,                authUrl, platform, mSocialLoginListener);        oauthDialog.show();    }    public AlertDialog create() {        if (shareDialog != null) {            return shareDialog;        }        return null;    }    private String buildSharePlatforms() {        ArrayList<String> platforms = new ArrayList<String>();        if (syncSina.isChecked()) {            platforms.add("sina");        }        if (syncQzone.isChecked()) {            platforms.add("qzone");        }        if (syncTqq.isChecked()) {            platforms.add("tqq");        }        if (syncRenren.isChecked()) {            platforms.add("renren");        }        StringBuilder platformsString = new StringBuilder();        for (int i = 0; i < platforms.size(); i++) {            platformsString.append(platforms.get(i));            if (i < platforms.size() - 1) {                platformsString.append(",");            }        }        return platformsString.toString();    }    private void unbindPlatform(HttpResponse response) throws IOException {        String result = EntityUtils.toString(response.getEntity(), "utf-8");        if (!TextUtils.isEmpty(result)) {            String[] platformList = result.split(",");            for (String plat: platformList) {                if (plat.equals("sina")) {                    Config.setActiveSina(false, context);                } else if (plat.equals("qq")) {                    Config.setActiveQQ(false, context);                } else if (plat.equals("renren")) {                    Config.setActiveRenren(false, context);                }            }        }    }    class ShareThread extends Thread {        private final String content;        public ShareThread(String content) {            this.content = content;        }        @Override        public void run() {            HttpPost request = new HttpPost(Const.SHARE_URL);            List<NameValuePair> params = new ArrayList<NameValuePair>();            params.add(new BasicNameValuePair("deviceId", Config                    .getDeviceInfo(context)));            params.add(new BasicNameValuePair("platform", buildSharePlatforms()));            params.add(new BasicNameValuePair("content", content));            try {                HttpEntity entity = new UrlEncodedFormEntity(params, "UTF-8");                request.setEntity(entity);                DefaultHttpClient client = new DefaultHttpClient();                HttpContext httpContext = new BasicHttpContext();                HttpResponse response = client.execute(request, httpContext);                if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {                    handler.post(new Thread() {                        public void run() {                            Toast.makeText(                                    context,                                    ((Activity) context)                                            .getString(R.string.share_success),                                    Toast.LENGTH_SHORT).show();                        }                    });                } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_BAD_REQUEST) {                    unbindPlatform(response);                    handler.post(new Thread() {                        public void run() {                            Toast.makeText(                                    context,                                    ((Activity) context)                                            .getString(R.string.share_expired),                                    Toast.LENGTH_SHORT).show();                            refreshShareStatus();                        }                    });                } else {                    unbindPlatform(response);                    handler.post(new Thread() {                        public void run() {                            Toast.makeText(                                    context,                                    ((Activity) context)                                            .getString(R.string.share_failure),                                    Toast.LENGTH_SHORT).show();                            refreshShareStatus();                        }                    });                }            } catch (Exception e) {                handler.post(new Thread() {                    public void run() {                        Toast.makeText(                                context,                                ((Activity) context)                                        .getString(R.string.share_failure),                                Toast.LENGTH_SHORT).show();                    }                });                Log.d("account", e.getMessage());            }        }    }    class SocialBindListener implements ISocialLogin {        @Override        public void onLoginSuccess(Platform platform) {            if (platform == null) {                return;            }            if (platform.equals(Platform.SINA)) {                Config.setActiveSina(true, context);            } else if (platform.equals(Platform.QQ)) {                Config.setActiveQQ(true, context);            } else if (platform.equals(Platform.RENREN)) {                Config.setActiveRenren(true, context);            }            handler.post(new Thread() {                public void run() {                    refreshShareStatus();                }            });        }        @Override        public void onLoginFailure() {            handler.post(new Thread() {                public void run() {                    Toast.makeText(context, "failure", Toast.LENGTH_SHORT)                            .show();                }            });        }    }}
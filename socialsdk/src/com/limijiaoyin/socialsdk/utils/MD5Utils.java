package com.limijiaoyin.socialsdk.utils;import android.text.TextUtils;import java.io.BufferedInputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.math.BigInteger;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.Arrays;public class MD5Utils {  private static String MD5 = "MD5";  private static final int STREAM_BUFFER_LENGTH = 128 * 1024;  static MessageDigest getDigest(String algorithm) {    try {      return MessageDigest.getInstance(algorithm);    } catch (NoSuchAlgorithmException e) {      throw new RuntimeException(e.getMessage());    }  }  /**   * Compute the input data's md5 value.   *    * @param inputStream   * @return   * @throws IOException   */  public static String md5Digest(InputStream inputStream) throws IOException {    MessageDigest digest = getDigest(MD5);    byte[] buffer = new byte[STREAM_BUFFER_LENGTH];    int read = inputStream.read(buffer, 0, STREAM_BUFFER_LENGTH);    while (read > -1) {      digest.update(buffer, 0, read);      read = inputStream.read(buffer, 0, STREAM_BUFFER_LENGTH);    }    return getHexString(digest.digest());  }  public static String md5Digest(InputStream inputStream, byte[] buffer) throws IOException {    MessageDigest digest = getDigest(MD5);    int read = inputStream.read(buffer, 0, buffer.length);    while (read > -1) {      digest.update(buffer, 0, read);      read = inputStream.read(buffer, 0, buffer.length);    }    return getHexString(digest.digest());  }  /**   * Compute the input string's md5 value.   *    * @param input   * @return   * @throws IOException   */  public static String md5Digest(String input) throws IOException {    MessageDigest digest = getDigest(MD5);    digest.update(input.getBytes());    return getHexString(digest.digest());  }  public static byte[] md5Digest(byte[] input) throws IOException {    MessageDigest digest = getDigest(MD5);    digest.update(input);    return digest.digest();  }  public static String md5DigestStr(byte[] input) throws IOException {    return getHexString(md5Digest(input));  }  private static String getHexString(byte[] digest) {    BigInteger bi = new BigInteger(1, digest);    return String.format("%032x", bi);  }  public static void main(String[] args) throws IOException {    byte[] result = md5Digest(new byte[] {0, 1});    System.out.println(Arrays.toString(result));  }  public static boolean checkMd5(String filePath, String targetMd5, StringBuilder md5Builder) {    File file = new File(filePath);    FileInputStream fileInputStream = null;    BufferedInputStream bufferedInputStream = null;    try {      fileInputStream = new FileInputStream(file);      bufferedInputStream = new BufferedInputStream(fileInputStream);      String md5 = MD5Utils.md5Digest(bufferedInputStream);      if (md5 != null && md5.equalsIgnoreCase(targetMd5)) {        if (md5Builder != null) {          md5Builder.append(md5);        }        return true;      } else {        if (md5Builder != null) {          if (TextUtils.isEmpty(md5)) {            md5Builder.append("empty");          } else {            md5Builder.append(md5);          }        }        return false;      }    } catch (FileNotFoundException e) {      e.printStackTrace();    } catch (IOException e) {      e.printStackTrace();    } finally {      if (bufferedInputStream != null) {        try {          bufferedInputStream.close();        } catch (IOException e) {          e.printStackTrace();        }      }      if (fileInputStream != null) {        try {          fileInputStream.close();        } catch (IOException e) {          e.printStackTrace();        }      }    }    return false;  }}